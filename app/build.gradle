apply plugin: 'com.android.library'
apply plugin: 'com.novoda.bintray-release'

publish {
    userOrg = 'kivensolo'
    groupId = 'com.github.zeke'
    artifactId = 'kangaroo'
    publishVersion = '1.0.0'
    desc = 'Agile Development Tool Libraries'
    website = 'https://github.com/kivensolo/AKangaroo'
}

android {
    compileSdkVersion 26
    defaultConfig {
        minSdkVersion 18
        targetSdkVersion 26
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    lintOptions {
        abortOnError false
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:recyclerview-v7:26.1.0'
    implementation 'com.android.support:appcompat-v7:26.1.0'
}

//[baseName]-[appendix]-[version]-[classifier].[extension]
task makeJar(type: Jar){
    baseName = "Akangaroo"
    appendix = "demo"
    version = "1.0.0"
    classifier = "debug"
    extension = "jar"
    from('build/intermediates/classes/debug')
    exclude('**/R.class')
    //去掉R$开头的文件
    exclude('**/R\$*.class')
}

task clearJar(type: Delete) {
    // 删除libs目录数据
    //delete 'build/libs/'
    // 有选择性的删除
    FileTree tree = fileTree("build/libs/")
    tree.visit {
        element ->
            if (element.getName().endsWith(".jar") &&
                    !element.getName().contains("javadoc") &&
                    !element.getName().contains("sources")) {
                println "$element.file.name" + " " + element.getName()
                delete element.file
            }
    }
}

def jarGroup = "jars"
makeJar.setGroup(jarGroup)
clearJar.setGroup(jarGroup)
makeJar.dependsOn(clearJar, build)

task sourcesJar(type: Jar) {
    appendix = 'kangaroo'
    version = "1.0.0"
    classifier = 'sources'
    from android.sourceSets.main.java.srcDirs
}

task javadoc(type: Javadoc) {
    version = "1.0.0"
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}
sourcesJar.setGroup(jarGroup)
javadocJar.setGroup(jarGroup)

artifacts {
    archives sourcesJar
    archives javadocJar
}





